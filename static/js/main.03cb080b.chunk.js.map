{"version":3,"sources":["components/header/header.js","components/footer/footer.js","components/form/crud-functions.js","components/form/form.js","components/results/results.js","components/aside/aside.js","App.js","serviceWorker.js","index.js"],"names":["Header","Component","Footer","CRUD","url","method","params","id","a","parsed","parseParams","response","getUrl","postUrl","updateUrl","deleteUrl","Error","contentType","headers","indexOf","body","obj","console","log","JSON","parse","e","superagent","get","post","send","put","delete","Form","props","state","onMethodChoice","bind","onURLChange","onParamChange","handleSubmit","event","this","setState","target","value","preventDefault","toggleLoading","handler","saveData","history","localStorage","getItem","output","key","md5","stringify","unit","setItem","onSubmit","onChange","type","name","condition","test","className","Results","data","length","loading","replacer","space","Aside","useState","results","setResults","React","useEffect","window","addEventListener","items","map","item","i","App","updateHandler","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.03cb080b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './header.scss'\n\nclass Header extends Component {\n  render() {\n    return <header>\n        <div>\n          RESTy\n        </div>\n    </header>\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport './footer.scss'\n\nclass Footer extends Component {\n  render() {\n    return <footer>\n        <div>\n          This is my footer\n        </div>\n    </footer>\n  }\n}\n\nexport default Footer;\n","import superagent from 'superagent';\nimport isUrl from 'validator/lib/isURL';\n\nexport async function CRUD(url, method, params, id) {\n  let parsed = parseParams(params);\n  let response = '';\n\n  // if(isUrl(url)){\n    switch (method) {\n      case 'GET':\n        response = await getUrl(url);\n        break;\n      case 'POST':\n        response = await postUrl(url, parsed);\n        break;\n      case 'UPDATE':\n        response = await updateUrl(url, parsed, id);\n        break;\n      case 'DELETE':\n        response = await deleteUrl(url, id);\n        break;\n      default:\n        throw new Error('Invalid Method');\n    }\n  // } else {\n  //   throw new Error('Invalid URL');\n  // }\n\n  let contentType = response.headers[\"content-type\"];\n  if (contentType && contentType.indexOf(\"application/json\") !== -1) {\n    return response.body;\n  } else {\n    throw new Error('Invalid Response not a JSON');\n  }\n}\n\nfunction parseParams(params) {\n  if (params) {\n    try {\n      let obj = {};\n      console.log(params);\n      obj = JSON.parse(params);\n      console.log(obj);\n      return obj;\n    } catch (e) {\n      throw new Error('Bad Object Params');\n    }\n  }\n}\n\nasync function getUrl(url) {\n  let response = await superagent.get(url);\n  return response;\n}\n\nasync function postUrl(url, params) {\n  let response = await superagent.post(url).send(params);\n  return response;\n}\n\nasync function updateUrl(url, params, id) {\n  let response = await superagent.put(url + `${id}`).send(params);\n  return response;\n}\n\nasync function deleteUrl(url, id) {\n  let response = await superagent.delete(url + `${id}`);\n  return response;\n}\n","import React, { Component } from 'react';\nimport './form.scss';\nimport './form.scss';\nimport { CRUD } from './crud-functions'\nimport { If, Then, Else, When, Unless, Switch, Case, Default } from 'react-if'\nimport md5 from 'md5';\n\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {url: '', method: '', params: '', id: ''};\n\n    this.onMethodChoice = this.onMethodChoice.bind(this);\n    this.onURLChange = this.onURLChange.bind(this);\n    this.onParamChange = this.onParamChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  \n  onMethodChoice(event) {\n    this.setState({method: event.target.value});\n  }\n\n  onURLChange(event) {\n    this.setState({url: event.target.value});\n  }\n\n  onParamChange(event) {\n    this.setState({params: event.target.value});\n  }\n\n  async handleSubmit(event) {\n    event.preventDefault();\n    // loader will show true\n    this.props.toggleLoading();\n    \n    let response = await CRUD(this.state.url, this.state.method, this.state.params, this.state.id);\n    this.props.handler(response);\n\n    this.saveData(this.state.url, this.state.method, this.state.params, this.state.id);\n    // toggle loader back to false \n    this.props.toggleLoading();\n  }\n\n  saveData(url, method, body, id) {\n    let history = JSON.parse(localStorage.getItem('API History')) || {};\n    let output = {\n      url: url,\n      method: method,\n      body: body,\n      id: id\n    }\n    let key = md5(JSON.stringify(output))\n    let unit = {[key]: output};\n\n    this.props.toggleLoading();\n    history[key] = unit;\n    localStorage.setItem('API History', JSON.stringify(history));\n  }\n\n  render() {\n    return (\n      <>\n        <form onSubmit={this.handleSubmit}>\n          <div onChange={this.onMethodChoice}>\n            <input type=\"radio\" value=\"GET\" name=\"method\" /> GET\n            <input type=\"radio\" value=\"POST\" name=\"method\" /> POST\n            <input type=\"radio\" value=\"UPDATE\" name=\"method\" /> UPDATE\n            <input type=\"radio\" value=\"DELETE\" name=\"method\" /> DELETE\n          </div>\n          <label>\n            URL:\n            <input type=\"text\" value={this.state.value} onChange={this.onURLChange}/>\n          </label>\n          <input type=\"submit\" value=\"Submit\" />\n          <br/>\n          {this.state.method}\n          <br/>\n          <If condition={() => this.state.method && (/POST|UPDATE/.test(this.state.method))}>\n            <Then>\n              <div className='body'>\n                <textarea value={this.state.value} onChange={this.onParamChange}/>\n              </div>\n            </Then>\n          <Else>\n            <When condition></When>\n          </Else>\n          </If>\n        </form>\n      </>\n    );\n  }\n}\n\nexport default Form;","import React from 'react';\nimport './results.scss'\nimport JSONPretty from 'react-json-pretty';\n\nconst Results = (props) => {\n  if (props.data.length !== 0) {\n    return (\n      <div className={`loading-${props.loading} output`} >\n    \n      <JSONPretty id=\"json-pretty\" data={props.data} replacer={\n        function (key, value) {\n            if (key === 'cccc') {\n                value += '~~~abc';\n            }\n            if (key === 'gggg') {\n                value *=10;\n            }\n            return value;\n        }\n      } space=\"6\"></JSONPretty>\n      </div>\n    );\n  } else {\n    return (\n      <div className='empty'>Waiting for input</div>\n    );\n  }\n\n}\n\nexport default Results;","import React, { Component, useState } from 'react';\nimport './aside.scss'\n\nfunction Aside(props) {\n  const [results, setResults] = useState(JSON.parse(localStorage.getItem('API History')) || {});\n\n  React.useEffect(() => {\n    window.addEventListener('storage', () => {\n      // When local storage changes, update the results list\n      setResults(JSON.parse(localStorage.getItem('API History')) || {});\n      console.log(results);\n    });\n  });\n\n    console.log(results);\n\n    let items = () => results.map((item, i)=> <li key={i} >{item.name}</li>);\n    return (\n      <aside>\n        <div className=\"title\">\n          Aside\n        </div>\n        <hr/>\n        <ul className=\"list\">\n          {items}\n        </ul>\n      </aside>\n    )\n}\n\nexport default Aside;\n","import React from 'react';\nimport './design/reset.css';\nimport './design/design.scss';\nimport Header from './components/header/header';\nimport Footer from './components/footer/footer';\nimport Form from './components/form/form';\nimport Results from './components/results/results';\nimport Aside from './components/aside/aside';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        loading: false,\n        results: []\n    };\n  }\n\n  toggleLoading = () => {\n    this.setState({loading: !this.state.loading})\n  }\n\n  updateHandler = (data) => {\n    console.log(data);\n    this.setState({results: data});\n  }\n\n  render () {\n    return (\n    <>\n      <Header/>\n      <Aside/>\n      <main>\n        <Form toggleLoading={this.toggleLoading} handler={this.updateHandler}/>\n        <Results loading={this.state.loading} data={this.state.results}/>\n      </main>\n      <Footer/>\n    </>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}