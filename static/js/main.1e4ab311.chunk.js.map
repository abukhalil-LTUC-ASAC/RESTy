{"version":3,"sources":["components/header/header.js","components/footer/footer.js","components/form/form.js","App.js","serviceWorker.js","index.js"],"names":["Header","Component","Footer","Form","props","state","url","method","result","onMethodChoice","bind","handleChange","handleSubmit","event","this","setState","target","value","preventDefault","onSubmit","onChange","type","name","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wTAaeA,G,6KARX,OAAO,gCACH,2C,GAHaC,cCUNC,G,6KARX,OAAO,gCACH,uD,GAHaD,c,OCgDNE,G,wDA/Cb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAACC,IAAK,GAAIC,OAAQ,GAAIC,OAAQ,IAE3C,EAAKC,eAAiB,EAAKA,eAAeC,KAApB,gBACtB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBANH,E,2DASJG,GACbC,KAAKC,SAAS,CAACR,OAAQM,EAAMG,OAAOC,U,mCAGzBJ,GACXC,KAAKC,SAAS,CAACT,IAAKO,EAAMG,OAAOC,U,mCAGtBJ,GACXA,EAAMK,iBACNJ,KAAKC,SAAS,CAACP,OAAO,GAAD,OAAKM,KAAKT,MAAME,OAAhB,aAA2BO,KAAKT,MAAMC,S,+BAI3D,OACE,oCACE,0BAAMa,SAAUL,KAAKF,cACnB,yBAAKQ,SAAUN,KAAKL,gBAClB,2BAAOY,KAAK,QAAQJ,MAAM,MAAMK,KAAK,WADvC,OAEE,2BAAOD,KAAK,QAAQJ,MAAM,OAAOK,KAAK,WAFxC,QAGE,2BAAOD,KAAK,QAAQJ,MAAM,SAASK,KAAK,WAH1C,UAIE,2BAAOD,KAAK,QAAQJ,MAAM,SAASK,KAAK,WAJ1C,WAMA,sCAEE,2BAAOD,KAAK,OAAOJ,MAAOH,KAAKT,MAAMY,MAAOG,SAAUN,KAAKH,gBAE7D,2BAAOU,KAAK,SAASJ,MAAM,WAC3B,6BACA,6BACGH,KAAKT,MAAMG,c,GAxCLP,cCgBJsB,MAZf,WACE,OACE,oCACE,kBAAC,EAAD,MACA,8BACE,kBAAC,EAAD,OAEF,kBAAC,EAAD,QCFcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1e4ab311.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './header.scss'\n\nclass Header extends Component {\n  render() {\n    return <header>\n        <div>\n          RESTy\n        </div>\n    </header>\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport './footer.scss'\n\nclass Footer extends Component {\n  render() {\n    return <footer>\n        <div>\n          This is my footer\n        </div>\n    </footer>\n  }\n}\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport './form.scss'\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {url: '', method: '', result: ''};\n\n    this.onMethodChoice = this.onMethodChoice.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  \n  onMethodChoice(event) {\n    this.setState({method: event.target.value});\n  }\n\n  handleChange(event) {\n    this.setState({url: event.target.value});\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    this.setState({result: `${this.state.method}: ${this.state.url}`});\n  }\n\n  render() {\n    return (\n      <>\n        <form onSubmit={this.handleSubmit}>\n          <div onChange={this.onMethodChoice}>\n            <input type=\"radio\" value=\"GET\" name=\"method\" /> GET\n            <input type=\"radio\" value=\"POST\" name=\"method\" /> POST\n            <input type=\"radio\" value=\"UPDATE\" name=\"method\" /> UPDATE\n            <input type=\"radio\" value=\"DELETE\" name=\"method\" /> DELETE\n          </div>\n          <label>\n            URL:\n            <input type=\"text\" value={this.state.value} onChange={this.handleChange}/>\n          </label>\n          <input type=\"submit\" value=\"Submit\" />\n          <br/>\n          <div>\n            {this.state.result}\n          </div>\n        </form>\n      </>\n    );\n  }\n}\n\nexport default Form;","import React from 'react';\nimport './design/reset.css';\nimport './design/design.scss';\nimport Header from './components/header/header';\nimport Footer from './components/footer/footer';\nimport Form from './components/form/form';\n\nfunction App() {\n  return (\n    <>\n      <Header/>\n      <main>\n        <Form/>\n      </main>\n      <Footer/>\n    </>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}